package ejbholidaybookingapp;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import entityclasses.HolidayRemainingDTO;
import model.TDepartment;
import model.TEmployee;
import model.TEmployeeRole;
import model.THolidayRemaining;

@Stateless
@LocalBean
public class HolidayRemainingAppBean implements HolidayRemainingAppBeanRemote {

	@PersistenceContext
	EntityManager entityManager;

    public HolidayRemainingAppBean() {
    }

	@Override
	public List<HolidayRemainingDTO> getAllHolidayRemaining() {
		@SuppressWarnings("unchecked")
		List<THolidayRemaining> allHolRemaining = entityManager.createNamedQuery("THolidayRemaining.findAll").getResultList();
		List<HolidayRemainingDTO> allHolRemainingDTO = new ArrayList<>();
		for (THolidayRemaining e : allHolRemaining) {
			allHolRemainingDTO.add(new HolidayRemainingDTO(e.getIdHolRemaining(), e.getHolidayDaysRemaining(), e.getOneYearDateCheck(),
				e.getFiveYearDateCheck(), e.getEmployee().getId()
			));
		}
		return allHolRemainingDTO;
	}

	@Override
	public void addHolRemainingRecord(HolidayRemainingDTO holRemaining) {
		try {
			TEmployee employee = entityManager.find(TEmployee.class, holRemaining.getIdEmp());
			THolidayRemaining newHolRemaining = new THolidayRemaining(holRemaining.getIdHolRemaining(), holRemaining.getHolidayDaysRemaining(),
					holRemaining.getOneYearDateCheck(), holRemaining.getFiveYearDateCheck(), employee
				);
			entityManager.persist(newHolRemaining);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void updateHolRemainingRecord(HolidayRemainingDTO updateholRemaining) {
		try {
			TEmployee employee = entityManager.find(TEmployee.class, updateholRemaining.getIdEmp());
			THolidayRemaining holRemaining = entityManager.find(THolidayRemaining.class, updateholRemaining.getIdHolRemaining());

			employee.setLastName(updateholRemaining.getLastName());
			employee.setFirstName(updateholRemaining.getFirstName());
			employee.setEmail(updateholRemaining.getEmail());
			employee.setPhoneNumber(updateholRemaining.getPhoneNumber());
			employee.setHomeAddress(updateholRemaining.getHomeAddress());
			employee.setSalary(updateholRemaining.getSalary());
			employee.setIsDeleted(updateholRemaining.getIsDeleted());

			entityManager.merge(employee);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
